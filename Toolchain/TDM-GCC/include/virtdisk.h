
#pragma once

typedef enum _GET_STORAGE_DEPENDENCY_FLAG {
  GET_STORAGE_DEPENDENCY_FLAG_NONE = 0x00000000,
  GET_STORAGE_DEPENDENCY_FLAG_HOST_VOLUMES = 0x00000001,
  GET_STORAGE_DEPENDENCY_FLAG_DISK_HANDLE = 0x00000002
} GET_STORAGE_DEPENDENCY_FLAG;

typedef enum _STORAGE_DEPENDENCY_INFO_VERSION {
  STORAGE_DEPENDENCY_INFO_VERSION_UNSPECIFIED = 0,
  STORAGE_DEPENDENCY_INFO_VERSION_1 = 1,
  STORAGE_DEPENDENCY_INFO_VERSION_2 = 2
} STORAGE_DEPENDENCY_INFO_VERSION;

typedef enum _DEPENDENT_DISK_FLAG {
  DEPENDENT_DISK_FLAG_NONE = 0x00000000,
  DEPENDENT_DISK_FLAG_MULT_BACKING_FILES = 0x00000001,
  DEPENDENT_DISK_FLAG_FULLY_ALLOCATED = 0x00000002,
  DEPENDENT_DISK_FLAG_READ_ONLY = 0x00000004,
  DEPENDENT_DISK_FLAG_REMOTE = 0x00000008,
  DEPENDENT_DISK_FLAG_SYSTEM_VOLUME = 0x00000010,
  DEPENDENT_DISK_FLAG_SYSTEM_VOLUME_PARENT = 0x00000020,
  DEPENDENT_DISK_FLAG_REMOVABLE = 0x00000040,
  DEPENDENT_DISK_FLAG_NO_DRIVE_LETTER = 0x00000080,
  DEPENDENT_DISK_FLAG_PARENT = 0x00000100,
  DEPENDENT_DISK_FLAG_NO_HOST_DISK = 0x00000200,
  DEPENDENT_DISK_FLAG_PERMANENT_LIFETIME = 0x00000400,
  DEPENDENT_DISK_FLAG_SUPPORT_COMPRESSED_VOLUMES,
  DEPENDENT_DISK_FLAG_ALWAYS_ALLOW_SPARSE,
  DEPENDENT_DISK_FLAG_SUPPORT_ENCRYPTED_FILES
} DEPENDENT_DISK_FLAG;

typedef enum _VIRTUAL_DISK_ACCESS_MASK {
  VIRTUAL_DISK_ACCESS_NONE = 0x00000000,
  VIRTUAL_DISK_ACCESS_ATTACH_RO = 0x00010000,
  VIRTUAL_DISK_ACCESS_ATTACH_RW = 0x00020000,
  VIRTUAL_DISK_ACCESS_DETACH = 0x00040000,
  VIRTUAL_DISK_ACCESS_GET_INFO = 0x00080000,
  VIRTUAL_DISK_ACCESS_CREATE = 0x00100000,
  VIRTUAL_DISK_ACCESS_METAOPS = 0x00200000,
  VIRTUAL_DISK_ACCESS_READ = 0x000d0000,
  VIRTUAL_DISK_ACCESS_ALL = 0x003f0000,
  VIRTUAL_DISK_ACCESS_WRITABLE = 0x00320000
} VIRTUAL_DISK_ACCESS_MASK;

typedef enum _OPEN_VIRTUAL_DISK_FLAG {
  OPEN_VIRTUAL_DISK_FLAG_NONE = 0x00000000,
  OPEN_VIRTUAL_DISK_FLAG_NO_PARENTS = 0x00000001,
  OPEN_VIRTUAL_DISK_FLAG_BLANK_FILE = 0x00000002,
  OPEN_VIRTUAL_DISK_FLAG_BOOT_DRIVE = 0x00000004,
  OPEN_VIRTUAL_DISK_FLAG_CACHED_IO = 0x00000008,
  OPEN_VIRTUAL_DISK_FLAG_CUSTOM_DIFF_CHAIN = 0x00000010,
  OPEN_VIRTUAL_DISK_FLAG_PARENT_CACHED_IO = 0x00000020,
  OPEN_VIRTUAL_DISK_FLAG_VHDSET_FILE_ONLY = 0x00000040,
  OPEN_VIRTUAL_DISK_FLAG_IGNORE_RELATIVE_PARENT_LOCATOR = 0x00000080,
  OPEN_VIRTUAL_DISK_FLAG_NO_WRITE_HARDENING = 0x00000100,
  OPEN_VIRTUAL_DISK_FLAG_SUPPORT_COMPRESSED_VOLUMES,
  OPEN_VIRTUAL_DISK_FLAG_SUPPORT_SPARSE_FILES_ANY_FS,
  OPEN_VIRTUAL_DISK_FLAG_SUPPORT_ENCRYPTED_FILES
} OPEN_VIRTUAL_DISK_FLAG;

typedef enum _DETACH_VIRTUAL_DISK_FLAG {
  DETACH_VIRTUAL_DISK_FLAG_NONE = 0x00000000
} DETACH_VIRTUAL_DISK_FLAG;

typedef enum _OPEN_VIRTUAL_DISK_VERSION {
  OPEN_VIRTUAL_DISK_VERSION_UNSPECIFIED = 0,
  OPEN_VIRTUAL_DISK_VERSION_1 = 1,
  OPEN_VIRTUAL_DISK_VERSION_2 = 2,
  OPEN_VIRTUAL_DISK_VERSION_3 = 3
} OPEN_VIRTUAL_DISK_VERSION;

typedef struct _VIRTUAL_STORAGE_TYPE {
  ULONG DeviceId;
  GUID  VendorId;
} VIRTUAL_STORAGE_TYPE, *PVIRTUAL_STORAGE_TYPE;

typedef struct _STORAGE_DEPENDENCY_INFO_TYPE_1 {
  DEPENDENT_DISK_FLAG  DependencyTypeFlags;
  ULONG                ProviderSpecificFlags;
  VIRTUAL_STORAGE_TYPE VirtualStorageType;
} STORAGE_DEPENDENCY_INFO_TYPE_1, *PSTORAGE_DEPENDENCY_INFO_TYPE_1;

typedef struct _STORAGE_DEPENDENCY_INFO_TYPE_2 {
  DEPENDENT_DISK_FLAG  DependencyTypeFlags;
  ULONG                ProviderSpecificFlags;
  VIRTUAL_STORAGE_TYPE VirtualStorageType;
  ULONG                AncestorLevel;
  PWSTR                DependencyDeviceName;
  PWSTR                HostVolumeName;
  PWSTR                DependentVolumeName;
  PWSTR                DependentVolumeRelativePath;
} STORAGE_DEPENDENCY_INFO_TYPE_2, *PSTORAGE_DEPENDENCY_INFO_TYPE_2;

typedef struct _STORAGE_DEPENDENCY_INFO {
  STORAGE_DEPENDENCY_INFO_VERSION Version;
  ULONG                           NumberEntries;
  union {
    STORAGE_DEPENDENCY_INFO_TYPE_1 Version1Entries[1];
    STORAGE_DEPENDENCY_INFO_TYPE_2 Version2Entries[1];
  };
} STORAGE_DEPENDENCY_INFO, *PSTORAGE_DEPENDENCY_INFO;

typedef struct _OPEN_VIRTUAL_DISK_PARAMETERS {
  OPEN_VIRTUAL_DISK_VERSION Version;
  union {
    struct {
      ULONG RWDepth;
    } Version1;
    struct {
      BOOL GetInfoOnly;
      BOOL ReadOnly;
      GUID ResiliencyGuid;
    } Version2;
  };
} OPEN_VIRTUAL_DISK_PARAMETERS, *POPEN_VIRTUAL_DISK_PARAMETERS;
